name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18"

jobs:
  # Install dependencies and run checks
  install-and-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          npm install --workspace=web
          npm install --workspace=server
          npm install --workspace=mobile
          npm install --workspace=shared

      - name: Run linting
        run: |
          npm run lint --workspace=web
          npm run lint --workspace=server
          npm run lint --workspace=mobile

      - name: Run tests
        run: |
          npm run test --workspace=web
          npm run test --workspace=server
          npm run test --workspace=mobile

  # Build web application
  build-web:
    runs-on: ubuntu-latest
    needs: install-and-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          npm install --workspace=web

      - name: Build web application
        run: npm run build --workspace=web

  # Build server application
  build-server:
    runs-on: ubuntu-latest
    needs: install-and-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          npm install --workspace=server

      - name: Build server application
        run: npm run build --workspace=server

  # Build mobile application
  build-mobile:
    runs-on: ubuntu-latest
    needs: install-and-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          npm install --workspace=mobile

      - name: Build mobile application
        run: npm run build --workspace=mobile

  # Docker build and test
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-web, build-server]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test Docker images
        run: |
          docker-compose build
          docker-compose up -d
          # Wait for services to be ready
          sleep 30
          # Test if web service is responding
          curl -f http://localhost:3000 || exit 1
          docker-compose down

  # Deploy to staging (on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-web, build-server, docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: docker-compose -f docker-compose.staging.yml up -d

  # Deploy to production (on tags)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-web, build-server, docker-build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: docker-compose -f docker-compose.prod.yml up -d
